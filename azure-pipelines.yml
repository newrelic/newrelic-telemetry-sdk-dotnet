trigger:
  - master
  - refs/tags/v*.*.*      # v1.0.0
  - refs/tags/v*.*.*-*    # v1.0.0-alpha
  - refs/tags/*_v*.*.*    # SomePrefix_v1.0.0
  - refs/tags/*_v*.*.*-*  # SomePrefix_v1.0.0-alpha

pool:
  vmImage: 'windows-latest'

variables:
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@0
  inputs:
    versionSpec: '>=4.3.0' 

- task: NuGetCommand@2
  inputs:
    command: 'restore'
    restoreSolution: 'NewRelic.sln' 

# - task: SonarCloudPrepare@1
#   condition: |
#     and (
#       succeeded(),
#       or (
#         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
#         startsWith(variables['Build.SourceBranch'], 'refs/tags')
#       )
#     )
#   displayName: 'SonarCloud - Prepare for Analysis'
#   inputs:
#     SonarCloud: 'SonarCloud'
#     organization: '$(SonarCloudOrganization)'
#     projectKey: '$(SonarCloudProjectKey)'
#     projectName: '$(SonarCloudProjectName)'
#     projectVersion: '$(Build.BuildNumber)'
#     extraProperties: |
#      sonar.cs.opencover.reportsPaths=$(Build.SourcesDirectory)/TestResults/Coverage/coverage.opencover.xml
#      sonar.exclusions=**/wwwroot/lib/**/*


- task: MSBuild@1
  displayName: 'Build (configuration=$(buildConfiguration))'
  inputs:
    solution: 'NewRelic.sln'
    configuration: $(buildConfiguration) 

- script: dotnet test tests/NewRelic.Telemetry.Tests --no-build --no-restore --configuration $(buildConfiguration) --logger trx
  displayName: 'Run tests - TelemetrySDK'

- script: dotnet test tests/OpenTelemetry.Exporter.NewRelic.Tests --no-build --no-restore --configuration $(buildConfiguration) --logger trx
  displayName: 'Run tests - OpenTelemetry'

# - script: dotnet test tests/IntegrationTests/IntegrationTests --no-build --no-restore --configuration $(buildConfiguration) --logger trx
#   displayName: 'Run tests - OpenTelemetry Integration Tests'

- task: PublishTestResults@2
  inputs:
    testRunner: VSTest
    testResultsFiles: '**/*.trx'


- task: CopyFiles@2
  inputs:
    contents: 'src/NewRelic.Telemetry/bin/$(buildConfiguration)/**/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)/TelemetrySDK'

- task: CopyFiles@2
  inputs:
    contents: 'src/OpenTelemetry.Exporter.NewRelic/bin/$(buildConfiguration)/**/*'
    targetFolder: '$(Build.ArtifactStagingDirectory)/OpenTelemetry'

# - task: SonarCloudAnalyze@1
#   condition: |
#     and (
#       succeeded(),
#       or (
#         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
#         startsWith(variables['Build.SourceBranch'], 'refs/tags')
#       )
#     )
#   displayName: 'SonarCloud - Code analysis'

# - task: SonarCloudPublish@1
#   condition: |
#     and (
#       succeeded(),
#       or (
#         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
#         startsWith(variables['Build.SourceBranch'], 'refs/tags')
#       )
#     )
#   displayName: 'SonarCloud - Publish Quality Gate Results'
  
# - task: sonarcloud-buildbreaker@2
#   condition: |
#     and (
#       succeeded(),
#       or (
#         eq(variables['Build.SourceBranch'], 'refs/heads/master'),
#         startsWith(variables['Build.SourceBranch'], 'refs/tags')
#       )
#     )
#   displayName: "SonarCloud - Validate Quality Gate Results"
#   # condition: and ( succeeded(), eq(variables['Build.Reason'], 'PullRequest'), eq(variables['System.PullRequest.TargetBranch'], 'master'))
#   inputs:
#     SonarCloud: 'SonarCloud'
#     organization: '$(SonarCloudOrganization)'

- task: PublishBuildArtifacts@1

- task: NuGetCommand@2
  condition: |
    and (
      succeeded(),
      or (
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags')
      )
    )
  displayName: 'Push packages to MyGet'
  inputs:
    command: 'push'
    packagesToPush: |
      $(Build.ArtifactStagingDirectory)/**/*.nupkg;
      !$(Build.ArtifactStagingDirectory)/**/*-unreleased*.nupkg;
    nuGetFeedType: 'external'
    publishFeedCredentials: 'MyGet'

- task: NuGetCommand@2
  condition: |
    and (
      succeeded(),
      or (
        eq(variables['Build.SourceBranch'], 'refs/heads/master'),
        startsWith(variables['Build.SourceBranch'], 'refs/tags')
      )
    )
  displayName: 'Push symbols packages to MyGet'
  inputs:
    command: 'push'
    packagesToPush: |
      $(Build.ArtifactStagingDirectory)/**/*.snupkg;
      !$(Build.ArtifactStagingDirectory)/**/*-unreleased*.snupkg
    nuGetFeedType: 'external'
    publishFeedCredentials: 'MyGetSymbols'
